}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
smry
smryLW
print(smryLW, row.names=FALSE)
print(smryLW[, -2], row.names=FALSE)
smryPr
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
?print
?cat
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
(cat("\n\n\n"))
print(paste0("Test ", i, ":   ", descr))
(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
cleanup()
q()
q()
library(LW1949)
LWP()
cleanup()
xy <-
structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97,
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1,
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2,
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6,
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9,
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7,
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5,
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9,
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8,
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3,
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1,
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8,
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7,
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8,
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1),
Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49,
50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18,
49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38,
57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73,
54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72,
50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25,
51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77,
51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2,
49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18,
54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42,
56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83,
54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58,
50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78,
49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA,
-120L), class = "data.frame")
arc <- structure(list(Long = c(662843L, 303344L, 634922L, 634177L, 310679L,
494213L, 426481L, 629459L, 640032L, 481274L, 712879L, 341099L,
514207L, 567047L, 459277L, 575434L, 709183L, 552371L, 309914L,
661364L, 347328L, 362256L, 627057L, 493059L, 486510L, 556726L,
463097L, 576453L, 371836L, 667253L, 462589L, 482793L, 642357L,
614686L, 438047L, 314744L, 393704L, 373215L, 570837L, 469155L,
485882L, 538672L, 475748L, 334217L, 691256L, 525404L, 382909L,
307134L, 431634L, 647819L, 294333L, 595640L, 587238L, 626271L,
650049L, 605478L, 709453L, 526955L, 460853L, 309177L, 566596L,
685513L, 357648L, 574174L, 489798L, 455265L, 523438L, 382373L,
647731L, 305459L, 693516L, 293105L, 607049L, 429728L, 399064L,
558985L, 354402L, 431804L, 452858L, 334572L, 353150L, 347255L,
309997L, 651587L, 377949L, 546719L, 328154L, 495398L, 544308L,
404778L, 380285L, 472101L, 451486L, 689300L, 641007L, 323389L,
579680L, 660968L, 624387L, 601305L, 704301L, 708545L, 325927L,
304077L, 681973L, 370117L, 536414L, 355787L, 686312L, 464761L,
430765L, 313128L, 370015L, 520058L, 308146L, 700041L, 284328L,
641445L, 382795L, 419101L), Lat = c(5861664L, 5773823L, 5643796L,
5801793L, 5656630L, 5488602L, 5661469L, 5428965L, 5610551L, 5888993L,
5595190L, 5498706L, 5585348L, 5447873L, 5555464L, 5980796L, 5562753L,
5533326L, 5432936L, 5488765L, 5776730L, 5982225L, 5531237L, 6514448L,
6278448L, 6471427L, 6401046L, 6449487L, 6358353L, 6156961L, 6345385L,
6111516L, 6606224L, 6233217L, 6510482L, 6073002L, 6246362L, 6304842L,
6184398L, 5768919L, 5618707L, 5440930L, 5714384L, 5510039L, 5642229L,
5469758L, 5592190L, 5711317L, 5680306L, 5453896L, 5651687L, 5600655L,
5678368L, 5709223L, 5505129L, 5639776L, 5500421L, 5852322L, 5575467L,
5556498L, 5909447L, 5850231L, 5705197L, 5759364L, 5807763L, 5896953L,
5586493L, 5781340L, 5804407L, 5572216L, 5675712L, 5472494L, 5887928L,
5975151L, 5428373L, 5518940L, 5588450L, 5530168L, 5474349L, 5449946L,
6066019L, 6119675L, 5907208L, 6000473L, 5877156L, 6030491L, 5910972L,
5970172L, 6141752L, 6216038L, 6116434L, 6231769L, 5919241L, 5974015L,
6128195L, 6206356L, 6000898L, 6190147L, 5990754L, 5673065L, 5483528L,
5667392L, 5430185L, 5534421L, 5500543L, 5703751L, 5936934L, 5638482L,
5603087L, 5916899L, 5864980L, 5814647L, 5499049L, 5540892L, 5445238L,
5740548L, 5489532L, 5809788L, 5799135L, 5544801L)), .Names = c("Long",
"Lat"), class = "data.frame", row.names = c(NA, -120L))
library(rgdal)
utm <- project(as.matrix(xy[,c("X","Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
windows()
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
windows()
plot(utm)
windows()
plot(arc)
head(xy)
head(utm)
head(arc)
windows()
par(mfrow=(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
graphics.off()
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par("mar")
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(1, 1, 2, 1))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
cleanup()
q()
pkgin("LW1949")
pkgman("LW1949")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
pkgup("artiFISHal")
q()
library(devtools)
devtools::use_vignette("aF-intro")
ViewZones(PanelProp = c(0.4, 0.3, 0.2, 0.1))
library(artiFISHal)
ViewZones(PanelProp = c(0.4, 0.3, 0.2, 0.1))
?SimFish
?TuneSelec
?ViewZones
ViewZones
256/574*396
113/85*396
256/574*526
cleanup()
library(jvamisc)
cleanup()
# vignette, code only
library(artiFISHal)
ExInputs <- data.frame(
Description = c("alewife small", "alewife small", "alewife large",
"alewife large", "alewife large", "alewife large", "rainbow smelt small",
"rainbow smelt small", "rainbow smelt large", "rainbow smelt large",
"bloater small", "bloater small", "bloater large", "bloater large"),
G = c("a", "a", "A", "A", "A", "A", "s", "s", "S", "S", "b", "b", "B", "B"),
Z = c(65, 65, 127, 127, 127, 127, 55, 55, 127, 127, 70, 70, 190, 190),
ZE = c(0.15, 0.15, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.15, 0.15, 0.3,
0.3),
LWC1 = 1e-8*c(1400, 1400, 1400, 1400, 1400, 1400, 481, 481, 481, 481, 102,
102, 102, 102),
LWC2 = c(2.8638, 2.8638, 2.8638, 2.8638, 2.8638, 2.8638, 3.0331, 3.0331,
3.0331, 3.0331, 3.3812, 3.3812, 3.3812, 3.3812),
LWCE = c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
0.05, 0.05, 0.05),
TSC1 = c(-64.2, -64.2, -64.2, -64.2, -64.2, -64.2, -67.8, -67.8, -67.8,
-67.8, -70.88, -70.88, -70.88, -70.88),
TSC2 = c(20.5, 20.5, 20.5, 20.5, 20.5, 20.5, 19.9, 19.9, 19.9, 19.9, 25.54,
25.54, 25.54, 25.54),
TSCE = c(0.03, 0.03, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.08, 0.08, 0.03,
0.03, 0.04, 0.04),
PropN = c(0.3, 0.3, 0.035, 0.035, 0.015, 0.015, 0.0375, 0.0375, 0.0375,
0.0375, 0.0375, 0.0375, 0.0375, 0.0375),
E = 100*c(93, 170, 6, 289, 90, 179, 93, 170, 6, 289, 93, 170, 34, 233),
EE = c(0.7, 0.4, 2.5, 0.1, 0.9, 0.6, 0.7, 0.4, 2.2, 0.1, 0.7, 0.4, 0.3, 0.1),
N = 100*c(100, 100, 100, 100, 100, 100, 100, 100, 170, 170, 100, 100, 75, 75),
NE = c(1, 1, 1, 1, 1, 1, 1, 1, 0.1, 0.1, 1, 1, 0.5, 0.5),
WD = c(14, 14, 11, 11, 11, 11, 16, 16, 29, 29, 20, 20, NA, NA),
WDE = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, NA, NA),
D2B = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 15, 15),
D2BE = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.3, 0.3))
myfish <- SimFish(LakeName="My Lake", LkWidth=30000, LkLength=20000,
BotDepMin=20, BotDepMax=100, FishParam=ExInputs, TotNFish=100000, Seed=545)
mysurv <- SampFish(SimPop=myfish, NumEvents=10, AcNum=15, AcInterval=30000,
AcLayer=10, AcAngle=7, MtNum=30, MtHt=10, MtWd=10, MtLen=2000, Seed=341)
SimPop=myfish
AcMtSurv=mysurv
AcExcl = c(0, 0)
MtExcl = c(0, 0)
PanelProps = c(0.4, 0.3, 0.2, 0.1)
SelecParam = NULL
Seed=927
if (!is.null(Seed)) set.seed(Seed)
mtr <- AcMtSurv$MtCatch
srv <- AcMtSurv$SurvParam
ac <- AcMtSurv$Targets
# check validity of the trawl zone proportions that were input
names(PanelProps) <- c("mouth", "middle", "aft", "cod")
panelprops <- rev(PanelProps)
if (round(sum(panelprops), 7) != 1) {
stop("cod proportions should sum to 1")
}
# availability function, = 0 at surface and bottom and = 1 in the middle
dblcut <- function(wdep, surfacecut, d2bot, bottomcut) {
as.numeric(wdep > surfacecut & d2bot > bottomcut)
}
# acoustic availability
ac$keep <- with(ac, dblcut(wdep=f.wdep, surfacecut=AcExcl[1], d2bot=f.d2bot,
bottomcut=AcExcl[2]))
# summarize by cell (interval x layer)
acs <- AcSmry(AcTarg=ac[ac$keep==1, ], LakeInfo=SimPop$LakeInfo,
SurvParam=AcMtSurv$SurvParam)$AcCell
# midwater trawl availability
if (is.null(SelecParam)) {
SelecParam <- data.frame(
G = character(),
Zone = character(),
MtL50Small = numeric(0),
MtSlopeSmall = numeric(0),
MtL50Large = numeric(0),
MtSlopeLarge = numeric(0))
}
# check validity of zones
suz <- c("mouth", "middle", "aft", "cod")
uz <- unique(SelecParam$Zone)
badzones <- setdiff(uz, suz)
if (length(badzones) > 0) {
stop('Zones must be one of "mouth", "middle", "aft", or "cod".')
}
# check for missings
missings <- sum(is.na(SelecParam))
if (missings > 0) {
stop("SelectParam data frame may not have any missing values.")
}
# fill in 100% selectivities for group-zones with no parameters
sug <- sort(unique(AcMtSurv$MtCatch$G))
full <- expand.grid(G=sug, Zone=suz)
selec2 <- merge(SelecParam, full, all=TRUE)
sel100 <- is.na(selec2$MtL50Small)
selec2$MtL50Small[sel100] <- -Inf
selec2$MtSlopeSmall[sel100] <- 100
selec2$MtL50Large[sel100] <- Inf
selec2$MtSlopeLarge[sel100] <- 200
# for each fish, determine its maximum vertical or horizontal distance from
#   the center of the trawl as a proportion of the trawl dimensions
mtr$maxdist <- with(mtr, pmax(abs(f.wdep - MTRwdep)/srv["MtHt"],
abs(f.north - ACnorth)/srv["MtWd"]))
# use this distance to assign each fish to a zone of the trawl
mtr$Zone <- cut(mtr$maxdist, breaks=c(0, cumsum(panelprops)),
include.lowest=TRUE, labels=names(panelprops))
mtrsel <- merge(mtr, selec2, all.x=TRUE)
# Think about trawl availability ... when we are cutting off trawls near the
#   surface or the bottom, shouldn't this constraint happen during the survey
#   itself, where trawls that encompass those "dead" zones can be eliminated?
mtrsel$p.avail <- with(mtrsel, dblcut(wdep=f.wdep, surfacecut=MtExcl[1],
d2bot=f.d2bot, bottomcut=MtExcl[2]))
mtrsel$p.selec <- with(mtrsel, logit2(x=len, x50a=MtL50Small,
slopea=MtSlopeSmall, x50b=MtL50Large, slopeb=-MtSlopeLarge))
mtrsel$p.catch <- mtrsel$p.avail*mtrsel$p.selec
# apply catchability (selectivity AND availability) functions to
#   "perfect" MTR catch
mtrsel$keep <- sapply(mtrsel$p.catch, function(p)
sample(0:1, size=1, replace=TRUE, prob=c(1-p, p)))
sue <- sort(unique(acs$Event))
results <- expand.grid(G=sug, Event=sue, nperha=NA, kgperha=NA)
sue
k <- 1
mtk <- droplevels(mtrsel[mtrsel$Event==k & mtrsel$keep==1, ])
dim(mtk)[1] > 0
ack <- acs[acs$Event==k, ]
names(mtk)[match(c("MTReast", "MTRd2sh", "MTRbdep", "MTRwdep",
"MTRd2bot"), names(mtk))] <-
c("interval", "d2sh", "botdep", "layer", "d2bot")
head(mtk)
head(mtk, 2)
with(mtk, plot(len, ts))
head(ack, 2)
?AcSmry
class(ac)
